class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int low=0,high= numbers.size()-1;
        while(low<high){
            if (numbers[low]+numbers[high]==target) return {low+1,high+1};
            else if(numbers[low]+numbers[high]>target) high--;
            else low++;
        }
        return {-1,-1};
    }
};
/*
x+y=target    len=n
-sorted do for each, bin search the target-y component T=O(nlogn)
*better 
- two pointer move from opp end , check
    -if sum> target  , right pt shifts, 
    -if sum <target , left pt shifts
    -if low==high->cant as same elem twice
    eventually when cross , we stop , either found or returned sol

*/

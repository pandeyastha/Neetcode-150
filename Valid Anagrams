class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length()!=t.length()) return false;
        unordered_map<char,int>mp;
        for(auto x:s)mp[x]++;
        for(auto x:t) mp[x]--;
        for(auto x:mp)if(x.second) return false;
        return true;
    }
};
/*
-all char of s in t  
 =>  whalt len of ? 
 => will s len = t?
 => what char in s ? alhanemueric ? alphabets? special char?   150,000
----------------------
Brute= >
if len !=, declare not
take all chars of s check in t, if already checked 
O(N^2) => not feasible

Better=>
 hash map of freq of cahrs , since 26 , more easy , if unicode still doable
 when found in s , -1 freq 
 if all freq eventually 0,(easy for 26 ) , declare yes/no
 O(n)+O(n)+O(n){calculting if any left} =>Linear

// one way also to sort &check O(nlogn *2 +n)
*/
